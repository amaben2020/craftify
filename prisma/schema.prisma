// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
 enum Role {
  ARTISAN
  CLIENT
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role     
  accounts      Account[]
  sessions      Session[]
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Artisan {
   id Int @id @default(autoincrement())
   profile ArtisanProfile?
   appliedClientJobs ClientJob?
   occupation String?
}

model Client {
     id Int @id @default(autoincrement())
     profile ClientProfile?
    postedJobs ClientJob[]
    @@map("clients")
}

model ClientProfile {
 id Int @id @default(autoincrement())
 firstName String
 lastName String
 email String
 image String
 address String?
 client Client @relation(fields: [clientId], references: [id])
 clientId Int @unique // relation scalar field i.e foreign key.
}


model ArtisanProfile {
 id Int @id @default(autoincrement())
 username String
 email String
 occupation String?
 artisan Artisan @relation(fields: [artisanId], references: [id])
 artisanId Int @unique // relation scalar field i.e foreign key
 refereeId Int @unique
 referee Referee @relation(fields: [refereeId], references: [id])
}

model Referee{
  id Int @id @default(autoincrement())
  name String
  relationship String
  contactInformation String
  artisan ArtisanProfile?
}
model ClientJob {
  id Int @id @default(autoincrement())
  title String
  images String[]
  postedBy Client @relation(fields: [postedById], references: [id])
  postedById Int @unique
  appliedBy Artisan? @relation(fields: [appliedById], references: [id])
  appliedById Int? @unique
  colorTone String?

  @@map("jobs")
}
